/* groovylint-disable NestedBlockDepth */
pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                sh 'pip install -r requirements.txt'
            }
        }
        stage('Python Lint') {
            steps {
                script {
                    def dirs = sh(script: 'ls -d */', returnStdout: true).trim().split()
                    for (dir in dirs) {
                        def pythonFiles = sh(script: "find ${dir} -name 'app.py'", returnStdout: true).trim().split()
                        if (pythonFiles.size() > 0) {
                            sh "python3 -m pylint --fail-under=5 ${pythonFiles.join(' ')}"
                        }
                    }
                }
            }
        }
        stage('Vulnerabilities scanning') {
            steps {
                script {
                    sh 'pip install --upgrade safety'
                    sh 'safety check'
                }
            }
        }
        stage('Package') {
                when {
                    expression { env.GIT_BRANCH == 'origin/main' }
                }
                steps {
                    script {
                        def dirs = sh(script: 'ls -d */', returnStdout: true).trim().split()
                        for (dir in dirs) {
                        def repoName = dir.replaceAll("/", "").toLowerCase()
                        if (fileExists("${dir}/Dockerfile")) {
                            withCredentials([string(credentialsId: 'DockerHub', variable: 'TOKEN')]) {
                                sh "docker login -u 'alexamog' -p '$TOKEN' docker.io"
                                sh "docker build . -t alexamog/${repoName}:latest"
                                sh "docker push alexamog/${repoName}:latest"
                            }
                        }
                        }
                    }
                }
        }
    }
}
